generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  passwordHash     String
  isAdmin          Boolean           @default(false)
  status           UserStatus        @default(ACTIVE)
  socialIds        Json?
  preferences      Json?
  lastLoginAt      DateTime          @default(now())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  discussionPosts  DiscussionPost[]
  inventories      Inventory[]
  items            Item[]            @relation("ItemCreator")
  inventoryEditors InventoryEditor[]
  likedItems       Item[]            @relation("ItemLikes")

  @@map("users")
}

model Inventory {
  id               String            @id @default(uuid())
  title            String
  description      String
  imageUrl         String?
  categoryId       String
  isPublic         Boolean           @default(false)
  version          Int               @default(1)
  customIdFormat   Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String
  customFields     CustomField[]
  discussionPosts  DiscussionPost[]
  creator          User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  category         Category          @relation(fields: [categoryId], references: [id])
  items            Item[]
  inventoryEditors InventoryEditor[]
  tags             Tag[]

  @@map("inventories")
}

model CustomField {
  id          String           @id @default(uuid())
  inventoryId String
  type        FieldType
  title       String
  description String?
  showInTable Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  inventory   Inventory        @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  fieldValues ItemFieldValue[]

  @@unique([inventoryId, title])
  @@map("custom_fields")
}

model Item {
  id          String           @id @default(uuid())
  inventoryId String
  customId    String
  createdBy   String
  createdAt   DateTime         @default(now())
  version     Int              @default(1)
  updatedAt   DateTime         @updatedAt
  creator     User             @relation("ItemCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  inventory   Inventory        @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  likedBy     User[]           @relation("ItemLikes")
  fieldValues ItemFieldValue[]

  @@unique([inventoryId, customId])
  @@map("items")
}

model DiscussionPost {
  id          String    @id @default(uuid())
  inventoryId String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("discussion_posts")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  inventories Inventory[]

  @@map("categories")
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  inventories Inventory[]

  @@map("tags")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

model ItemFieldValue {
  id            String      @id @default(uuid())
  itemId        String
  customFieldId String
  value         String?

  item        Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  customField CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([itemId, customFieldId])
  @@map("item_field_values")
}

enum FieldType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
}

enum InventoryRole {
  OWNER
  EDITOR
}

model InventoryEditor {
  inventoryId String
  userId      String
  role        InventoryRole
  createdAt   DateTime      @default(now())

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([inventoryId, userId])
  @@map("inventory_editors")
}